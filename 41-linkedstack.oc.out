ROOT "" 0:0.000                            
|  PROTOTYPE "" 5:23.000        
|  |  VOID "void" 5:23.000  void 
|  |  |  DECLID "__assert_fail" 5:23.005 void prototype 
|  |  PARAMLIST "(" 5:23.019         
|  |  |  STRING "string" 5:23.020 string 
|  |  |  |  DECLID "expr" 5:23.027 string variable param lval 
|  |  |  STRING "string" 5:23.033 string 
|  |  |  |  DECLID "file" 5:23.040 string variable param lval 
|  |  |  INT "int" 5:23.046   int 
|  |  |  |  DECLID "line" 5:23.050 int variable param lval 
|  PROTOTYPE "" 5:24.000        
|  |  VOID "void" 5:24.000  void 
|  |  |  DECLID "putb" 5:24.005 void prototype 
|  |  PARAMLIST "(" 5:24.010       
|  |  |  BOOL "bool" 5:24.011  bool 
|  |  |  |  DECLID "b" 5:24.016 bool variable param lval 
|  PROTOTYPE "" 5:25.000        
|  |  VOID "void" 5:25.000  void 
|  |  |  DECLID "putc" 5:25.005 void prototype 
|  |  PARAMLIST "(" 5:25.010       
|  |  |  CHAR "char" 5:25.011  char 
|  |  |  |  DECLID "c" 5:25.016 char variable param lval 
|  PROTOTYPE "" 5:26.000        
|  |  VOID "void" 5:26.000  void 
|  |  |  DECLID "puti" 5:26.005 void prototype 
|  |  PARAMLIST "(" 5:26.010       
|  |  |  INT "int" 5:26.011   int 
|  |  |  |  DECLID "i" 5:26.015 int variable param lval 
|  PROTOTYPE "" 5:27.000        
|  |  VOID "void" 5:27.000  void 
|  |  |  DECLID "puts" 5:27.005 void prototype 
|  |  PARAMLIST "(" 5:27.010       
|  |  |  STRING "string" 5:27.011 string 
|  |  |  |  DECLID "s" 5:27.018 string variable param lval 
|  PROTOTYPE "" 5:28.000        
|  |  VOID "void" 5:28.000  void 
|  |  |  DECLID "endl" 5:28.005 void prototype 
|  |  PARAMLIST "(" 5:28.010       
|  PROTOTYPE "" 5:29.000        
|  |  INT "int" 5:29.000   int 
|  |  |  DECLID "getc" 5:29.004 int prototype 
|  |  PARAMLIST "(" 5:29.009       
|  PROTOTYPE "" 5:30.000        
|  |  STRING "string" 5:30.000 string 
|  |  |  DECLID "getw" 5:30.007 string prototype 
|  |  PARAMLIST "(" 5:30.012       
|  PROTOTYPE "" 5:31.000        
|  |  STRING "string" 5:31.000 string 
|  |  |  DECLID "getln" 5:31.007 string prototype 
|  |  PARAMLIST "(" 5:31.013       
|  PROTOTYPE "" 5:32.006        
|  |  ARRAY "[]" 5:32.006 string array lval vaddr  
|  |  |  STRING "string" 5:32.000 string 
|  |  |  DECLID "getargv" 5:32.009 string array vaddr prototype 
|  |  PARAMLIST "(" 5:32.017       
|  PROTOTYPE "" 5:33.000        
|  |  VOID "void" 5:33.000  void 
|  |  |  DECLID "exit" 5:33.005 void prototype 
|  |  PARAMLIST "(" 5:33.010       
|  |  |  INT "int" 5:33.011   int 
|  |  |  |  DECLID "status" 5:33.015 int variable param lval 
|  STRUCT "struct" 6:5.000         
|  |  TYPEID "node" 6:5.007 struct "node" 
|  |  STRING "string" 6:6.003 string 
|  |  |  FIELD "data" 6:6.010 string field {node} 
|  |  TYPEID "node" 6:7.003 struct "node" 
|  |  |  FIELD "link" 6:7.008 struct "node" field {node} 
|  STRUCT "struct" 6:10.000        
|  |  TYPEID "stack" 6:10.007 struct "stack" 
|  |  TYPEID "node" 6:11.003 struct "node" 
|  |  |  FIELD "top" 6:11.008 struct "node" field {stack} 
|  FUNCTION "" 6:14.000         
|  |  BOOL "bool" 6:14.000  bool 
|  |  |  DECLID "empty" 6:14.005 bool function 
|  |  PARAMLIST "(" 6:14.011       
|  |  |  TYPEID "stack" 6:14.012 struct "stack" 
|  |  |  |  DECLID "stack" 6:14.018 struct "stack" variable param lval 
|  |  BLOCK "{" 6:14.025         
|  |  |  BLOCK "{" 6:15.003       
|  |  |  |  IFELSE "if" 6:15.004        
|  |  |  |  |  '!' "!" 6:15.008 bool vreg 
|  |  |  |  |  |  NE "!=" 6:15.016 bool vreg  
|  |  |  |  |  |  |  IDENT "stack" 6:15.010 struct "stack" variable param lval 
|  |  |  |  |  |  |  NULL "null" 6:15.019  null 
|  |  |  |  |  CALL "(" 6:15.040 void prototype    
|  |  |  |  |  |  IDENT "__assert_fail" 6:15.026 void prototype 
|  |  |  |  |  |  STRINGCON ""stack != null"" 6:15.041 string const 
|  |  |  |  |  |  STRINGCON ""41-linkedstack.oc"" 6:15.058 string const 
|  |  |  |  |  |  INTCON "15" 6:15.079 int const 
|  |  |  ';' ";" 6:15.084       
|  |  |  RETURN "return" 6:16.003 bool vreg 
|  |  |  |  EQ "==" 6:16.020 bool vreg  
|  |  |  |  |  '.' "." 6:16.015 struct "node" field vaddr  
|  |  |  |  |  |  IDENT "stack" 6:16.010 struct "stack" variable param lval 
|  |  |  |  |  |  FIELD "top" 6:16.016 field {stack} 
|  |  |  |  |  NULL "null" 6:16.023  null 
|  FUNCTION "" 6:19.000         
|  |  TYPEID "stack" 6:19.000 struct "stack" 
|  |  |  DECLID "new_stack" 6:19.006 struct "stack" function 
|  |  PARAMLIST "(" 6:19.016       
|  |  BLOCK "{" 6:19.019         
|  |  |  VARDECL "=" 6:20.015        
|  |  |  |  TYPEID "stack" 6:20.003 struct "stack" 
|  |  |  |  |  DECLID "stack" 6:20.009 struct "stack" variable lval 
|  |  |  |  TYPEID "stack" 6:20.021 struct "stack" vreg 
|  |  |  |  |  NEW "new" 6:20.017       
|  |  |  '=' "=" 6:21.013        
|  |  |  |  '.' "." 6:21.008 struct "node" field vaddr  
|  |  |  |  |  IDENT "stack" 6:21.003 struct "stack" variable lval 
|  |  |  |  |  FIELD "top" 6:21.009 field {stack} 
|  |  |  |  NULL "null" 6:21.015 null vreg 
|  |  |  RETURN "return" 6:22.003 struct "stack" variable lval 
|  |  |  |  IDENT "stack" 6:22.010 struct "stack" variable lval 
|  FUNCTION "" 6:25.000         
|  |  VOID "void" 6:25.000  void 
|  |  |  DECLID "push" 6:25.005 void function 
|  |  PARAMLIST "(" 6:25.010        
|  |  |  TYPEID "stack" 6:25.011 struct "stack" 
|  |  |  |  DECLID "stack" 6:25.017 struct "stack" variable param lval 
|  |  |  STRING "string" 6:25.024 string 
|  |  |  |  DECLID "str" 6:25.031 string variable param lval 
|  |  BLOCK "{" 6:25.036            
|  |  |  BLOCK "{" 6:26.003       
|  |  |  |  IFELSE "if" 6:26.004        
|  |  |  |  |  '!' "!" 6:26.008 bool vreg 
|  |  |  |  |  |  NE "!=" 6:26.016 bool vreg  
|  |  |  |  |  |  |  IDENT "stack" 6:26.010 struct "stack" variable param lval 
|  |  |  |  |  |  |  NULL "null" 6:26.019  null 
|  |  |  |  |  CALL "(" 6:26.040 void prototype    
|  |  |  |  |  |  IDENT "__assert_fail" 6:26.026 void prototype 
|  |  |  |  |  |  STRINGCON ""stack != null"" 6:26.041 string const 
|  |  |  |  |  |  STRINGCON ""41-linkedstack.oc"" 6:26.058 string const 
|  |  |  |  |  |  INTCON "26" 6:26.079 int const 
|  |  |  ';' ";" 6:26.084       
|  |  |  VARDECL "=" 6:27.012        
|  |  |  |  TYPEID "node" 6:27.003 struct "node" 
|  |  |  |  |  DECLID "tmp" 6:27.008 struct "node" variable lval 
|  |  |  |  TYPEID "node" 6:27.018 struct "node" vreg 
|  |  |  |  |  NEW "new" 6:27.014       
|  |  |  '=' "=" 6:28.012        
|  |  |  |  '.' "." 6:28.006 string field vaddr  
|  |  |  |  |  IDENT "tmp" 6:28.003 struct "node" variable lval 
|  |  |  |  |  FIELD "data" 6:28.007 field {node} 
|  |  |  |  IDENT "str" 6:28.014 string variable param vreg 
|  |  |  '=' "=" 6:29.012        
|  |  |  |  '.' "." 6:29.006 struct "node" field vaddr  
|  |  |  |  |  IDENT "tmp" 6:29.003 struct "node" variable lval 
|  |  |  |  |  FIELD "link" 6:29.007 field {node} 
|  |  |  |  '.' "." 6:29.019 struct "node" field vaddr  
|  |  |  |  |  IDENT "stack" 6:29.014 struct "stack" variable param lval 
|  |  |  |  |  FIELD "top" 6:29.020 field {stack} 
|  |  |  '=' "=" 6:30.013        
|  |  |  |  '.' "." 6:30.008 struct "node" field vaddr  
|  |  |  |  |  IDENT "stack" 6:30.003 struct "stack" variable param lval 
|  |  |  |  |  FIELD "top" 6:30.009 field {stack} 
|  |  |  |  IDENT "tmp" 6:30.015 struct "node" variable lval 
|  FUNCTION "" 6:33.000         
|  |  STRING "string" 6:33.000 string 
|  |  |  DECLID "pop" 6:33.007 string function 
|  |  PARAMLIST "(" 6:33.011       
|  |  |  TYPEID "stack" 6:33.012 struct "stack" 
|  |  |  |  DECLID "stack" 6:33.018 struct "stack" variable param lval 
|  |  BLOCK "{" 6:33.025             
|  |  |  BLOCK "{" 6:34.003       
|  |  |  |  IFELSE "if" 6:34.004        
|  |  |  |  |  '!' "!" 6:34.008 bool vreg 
|  |  |  |  |  |  NE "!=" 6:34.016 bool vreg  
|  |  |  |  |  |  |  IDENT "stack" 6:34.010 struct "stack" variable param lval 
|  |  |  |  |  |  |  NULL "null" 6:34.019  null 
|  |  |  |  |  CALL "(" 6:34.040 void prototype    
|  |  |  |  |  |  IDENT "__assert_fail" 6:34.026 void prototype 
|  |  |  |  |  |  STRINGCON ""stack != null"" 6:34.041 string const 
|  |  |  |  |  |  STRINGCON ""41-linkedstack.oc"" 6:34.058 string const 
|  |  |  |  |  |  INTCON "34" 6:34.079 int const 
|  |  |  ';' ";" 6:34.084       
|  |  |  BLOCK "{" 6:35.003       
|  |  |  |  IFELSE "if" 6:35.004        
|  |  |  |  |  '!' "!" 6:35.008 bool vreg 
|  |  |  |  |  |  '!' "!" 6:35.010 bool vreg 
|  |  |  |  |  |  |  CALL "(" 6:35.018  bool  
|  |  |  |  |  |  |  |  IDENT "empty" 6:35.012 bool function 
|  |  |  |  |  |  |  |  IDENT "stack" 6:35.019 struct "stack" variable param lval 
|  |  |  |  |  CALL "(" 6:35.042 void prototype    
|  |  |  |  |  |  IDENT "__assert_fail" 6:35.028 void prototype 
|  |  |  |  |  |  STRINGCON ""! empty (stack)"" 6:35.043 string const 
|  |  |  |  |  |  STRINGCON ""41-linkedstack.oc"" 6:35.062 string const 
|  |  |  |  |  |  INTCON "35" 6:35.083 int const 
|  |  |  ';' ";" 6:35.088       
|  |  |  VARDECL "=" 6:36.014        
|  |  |  |  STRING "string" 6:36.003 string lval 
|  |  |  |  |  DECLID "tmp" 6:36.010 string variable lval 
|  |  |  |  '.' "." 6:36.025 string field vreg vaddr  
|  |  |  |  |  '.' "." 6:36.021 struct "node" field vaddr  
|  |  |  |  |  |  IDENT "stack" 6:36.016 struct "stack" variable param lval 
|  |  |  |  |  |  FIELD "top" 6:36.022 field {stack} 
|  |  |  |  |  FIELD "data" 6:36.026 field {node} 
|  |  |  '=' "=" 6:37.013        
|  |  |  |  '.' "." 6:37.008 struct "node" field vaddr  
|  |  |  |  |  IDENT "stack" 6:37.003 struct "stack" variable param lval 
|  |  |  |  |  FIELD "top" 6:37.009 field {stack} 
|  |  |  |  '.' "." 6:37.024 struct "node" field vaddr  
|  |  |  |  |  '.' "." 6:37.020 struct "node" field vaddr  
|  |  |  |  |  |  IDENT "stack" 6:37.015 struct "stack" variable param lval 
|  |  |  |  |  |  FIELD "top" 6:37.021 field {stack} 
|  |  |  |  |  FIELD "link" 6:37.025 field {node} 
|  |  |  RETURN "return" 6:38.003 string variable lval 
|  |  |  |  IDENT "tmp" 6:38.010 string variable lval 
|  VARDECL "=" 6:43.014        
|  |  ARRAY "[]" 6:43.006 string array lval vaddr  
|  |  |  STRING "string" 6:43.000 string 
|  |  |  DECLID "argv" 6:43.009 string array variable lval 
|  |  CALL "(" 6:43.024 string array vreg vaddr prototype 
|  |  |  IDENT "getargv" 6:43.016 string array vaddr prototype 
|  VARDECL "=" 6:44.012        
|  |  TYPEID "stack" 6:44.000 struct "stack" 
|  |  |  DECLID "stack" 6:44.006 struct "stack" variable lval 
|  |  CALL "(" 6:44.024 struct "stack" 
|  |  |  IDENT "new_stack" 6:44.014 struct "stack" function 
|  VARDECL "=" 6:45.009        
|  |  INT "int" 6:45.000 int lval 
|  |  |  DECLID "argi" 6:45.004 int variable lval 
|  |  INTCON "0" 6:45.011 int const vreg 
|  WHILE "while" 6:47.000        
|  |  NE "!=" 6:47.018 bool vreg  
|  |  |  INDEX "[" 6:47.011 string vreg vaddr  
|  |  |  |  IDENT "argv" 6:47.007 string array variable lval 
|  |  |  |  IDENT "argi" 6:47.012 int variable lval 
|  |  |  NULL "null" 6:47.021  null 
|  |  BLOCK "{" 6:47.027        
|  |  |  CALL "(" 6:48.008  void   
|  |  |  |  IDENT "push" 6:48.003 void function 
|  |  |  |  IDENT "stack" 6:48.009 struct "stack" variable lval 
|  |  |  |  INDEX "[" 6:48.020 string vreg vaddr  
|  |  |  |  |  IDENT "argv" 6:48.016 string array variable lval 
|  |  |  |  |  IDENT "argi" 6:48.021 int variable lval 
|  |  |  '=' "=" 6:49.008        
|  |  |  |  IDENT "argi" 6:49.003 int variable lval 
|  |  |  |  '+' "+" 6:49.015 int vreg  
|  |  |  |  |  IDENT "argi" 6:49.010 int variable lval 
|  |  |  |  |  INTCON "1" 6:49.017 int const 
|  WHILE "while" 6:52.000        
|  |  '!' "!" 6:52.007 bool vreg 
|  |  |  CALL "(" 6:52.015  bool  
|  |  |  |  IDENT "empty" 6:52.009 bool function 
|  |  |  |  IDENT "stack" 6:52.016 struct "stack" variable lval 
|  |  BLOCK "{" 6:52.024        
|  |  |  CALL "(" 6:53.008 void prototype  
|  |  |  |  IDENT "puts" 6:53.003 void prototype 
|  |  |  |  CALL "(" 6:53.013 string  
|  |  |  |  |  IDENT "pop" 6:53.009 string function 
|  |  |  |  |  IDENT "stack" 6:53.014 struct "stack" variable lval 
|  |  |  CALL "(" 6:54.008 void prototype 
|  |  |  |  IDENT "endl" 6:54.003 void prototype 


this case: null
struct s_node {
        char** f_node_data;
        struct s_node** f_node_link;
};
struct s_stack {
        struct s_node** f_stack_top;
};
char* c1 = "stack != null";
char* c2 = "41-linkedstack.oc";
char* c3 = "stack != null";
char* c4 = "41-linkedstack.oc";
char* c5 = "stack != null";
char* c6 = "41-linkedstack.oc";
char* c7 = "! empty (stack)";
char* c8 = "41-linkedstack.oc";
char** __argv;
struct s_stack* s_stack;
int __argi;
char __empty (
        struct s_stack* _12_stack)
{
        char  c9 = _12_stack != 0;
        char  c11 = _12_stack != 0;
        char  c13 = !c11;
        if(!c13) goto fi_6_15_4;
        ____assert_fail(c1, c2, 15);
fi_6_15_4:;
        struct s_node*  *a16 = &_12_stack->f_stack_top;
        char  c18 = *a16 == 0;
return c18;
};
struct s_stack* __new_stack ()
{
        struct s_stack*  p20 = xcalloc (1, sizeof(struct s_stack));
        struct s_stack* _14_stack = p20;
        struct s_node*  *a22 = &_14_stack->f_stack_top;
        *a22 = null;
return _14_stack;
};
char __push (
        struct s_stack* _15_stack,

        char* _15_str)
{
        char  c24 = _15_stack != 0;
        char  c26 = _15_stack != 0;
        char  c28 = !c26;
        if(!c28) goto fi_6_26_4;
        ____assert_fail(c3, c4, 26);
fi_6_26_4:;
        struct s_node*  p31 = xcalloc (1, sizeof(struct s_node));
        struct s_node* _15_tmp = p31;
        char*  *a33 = &_15_tmp->f_node_data;
        *a33 = _15_str;
        struct s_node*  *a35 = &_15_tmp->f_node_link;
        struct s_node*  *a37 = &_15_stack->f_stack_top;
        *a35 = *a37;
        struct s_node*  *a39 = &_15_stack->f_stack_top;
        *a39 = _15_tmp;
};
char* __pop (
        struct s_stack* _17_stack)
{
        char  c41 = _17_stack != 0;
        char  c43 = _17_stack != 0;
        char  c45 = !c43;
        if(!c45) goto fi_6_34_4;
        ____assert_fail(c5, c6, 34);
fi_6_34_4:;
        char  c48 = __empty(_17_stack);
        char  c50 = __empty(_17_stack);
        char  c52 = !c50;
        char  c54 = __empty(_17_stack);
        char  c56 = __empty(_17_stack);
        char  c58 = !c56;
        char  c60 = !c58;
        if(!c60) goto fi_6_35_4;
        ____assert_fail(c7, c8, 35);
fi_6_35_4:;
        struct s_node*  *a63 = &_17_stack->f_stack_top;
        char*  *a65 = &*a63->f_node_data;
        char* _17_tmp = *a65;
        struct s_node*  *a67 = &_17_stack->f_stack_top;
        struct s_node*  *a69 = &_17_stack->f_stack_top;
        struct s_node*  *a71 = &*a69->f_node_link;
        *a67 = *a71;
return _17_tmp;
};
void __ocmain (void) {
        char**  a73 = __getargv();
        char** __argv = a73;
        struct s_stack*  p75 = __new_stack();
        struct s_stack* s_stack = p75;
        int __argi = 0;
while_6_47_0:;
        char*  *a77 = &__argv[__argi];
        char  c79 = *a77 != 0;
        if(!c79) goto break_6_47_0;
        char*  *a81 = &__argv[__argi];
        __push(s_stack, *a81);
        int  i84 = __argi + 1;
         __argi = i84;
        goto while_6_47_0;
break_6_47_0:;
while_6_52_0:;
        char  c86 = __empty(s_stack);
        char  c88 = __empty(s_stack);
        char  c90 = !c88;
        if(!c90) goto break_6_52_0;
        char*  c92 = __pop(s_stack);
        __puts(c92);
        __endl();
        goto while_6_52_0;
break_6_52_0:;
return;
};
