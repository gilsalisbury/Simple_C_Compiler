ROOT "" 0:0.000                         
|  PROTOTYPE "" 5:23.000        
|  |  VOID "void" 5:23.000  void 
|  |  |  DECLID "__assert_fail" 5:23.005 void prototype 
|  |  PARAMLIST "(" 5:23.019         
|  |  |  STRING "string" 5:23.020 string 
|  |  |  |  DECLID "expr" 5:23.027 string variable param lval 
|  |  |  STRING "string" 5:23.033 string 
|  |  |  |  DECLID "file" 5:23.040 string variable param lval 
|  |  |  INT "int" 5:23.046   int 
|  |  |  |  DECLID "line" 5:23.050 int variable param lval 
|  PROTOTYPE "" 5:24.000        
|  |  VOID "void" 5:24.000  void 
|  |  |  DECLID "putb" 5:24.005 void prototype 
|  |  PARAMLIST "(" 5:24.010       
|  |  |  BOOL "bool" 5:24.011  bool 
|  |  |  |  DECLID "b" 5:24.016 bool variable param lval 
|  PROTOTYPE "" 5:25.000        
|  |  VOID "void" 5:25.000  void 
|  |  |  DECLID "putc" 5:25.005 void prototype 
|  |  PARAMLIST "(" 5:25.010       
|  |  |  CHAR "char" 5:25.011  char 
|  |  |  |  DECLID "c" 5:25.016 char variable param lval 
|  PROTOTYPE "" 5:26.000        
|  |  VOID "void" 5:26.000  void 
|  |  |  DECLID "puti" 5:26.005 void prototype 
|  |  PARAMLIST "(" 5:26.010       
|  |  |  INT "int" 5:26.011   int 
|  |  |  |  DECLID "i" 5:26.015 int variable param lval 
|  PROTOTYPE "" 5:27.000        
|  |  VOID "void" 5:27.000  void 
|  |  |  DECLID "puts" 5:27.005 void prototype 
|  |  PARAMLIST "(" 5:27.010       
|  |  |  STRING "string" 5:27.011 string 
|  |  |  |  DECLID "s" 5:27.018 string variable param lval 
|  PROTOTYPE "" 5:28.000        
|  |  VOID "void" 5:28.000  void 
|  |  |  DECLID "endl" 5:28.005 void prototype 
|  |  PARAMLIST "(" 5:28.010       
|  PROTOTYPE "" 5:29.000        
|  |  INT "int" 5:29.000   int 
|  |  |  DECLID "getc" 5:29.004 int prototype 
|  |  PARAMLIST "(" 5:29.009       
|  PROTOTYPE "" 5:30.000        
|  |  STRING "string" 5:30.000 string 
|  |  |  DECLID "getw" 5:30.007 string prototype 
|  |  PARAMLIST "(" 5:30.012       
|  PROTOTYPE "" 5:31.000        
|  |  STRING "string" 5:31.000 string 
|  |  |  DECLID "getln" 5:31.007 string prototype 
|  |  PARAMLIST "(" 5:31.013       
|  PROTOTYPE "" 5:32.006        
|  |  ARRAY "[]" 5:32.006 string array lval vaddr  
|  |  |  STRING "string" 5:32.000 string 
|  |  |  DECLID "getargv" 5:32.009 string array vaddr prototype 
|  |  PARAMLIST "(" 5:32.017       
|  PROTOTYPE "" 5:33.000        
|  |  VOID "void" 5:33.000  void 
|  |  |  DECLID "exit" 5:33.005 void prototype 
|  |  PARAMLIST "(" 5:33.010       
|  |  |  INT "int" 5:33.011   int 
|  |  |  |  DECLID "status" 5:33.015 int variable param lval 
|  CALL "(" 6:6.005 void prototype  
|  |  IDENT "puts" 6:6.000 void prototype 
|  |  INDEX "[" 6:6.015 string vreg vaddr prototype  
|  |  |  CALL "(" 6:6.013 string array vaddr prototype 
|  |  |  |  IDENT "getargv" 6:6.006 string array vaddr prototype 
|  |  |  INTCON "0" 6:6.016 int const 
|  CALL "(" 6:7.005 void prototype  
|  |  IDENT "puts" 6:7.000 void prototype 
|  |  STRINGCON "" was compiled "" 6:7.006 string const 
|  CALL "(" 6:8.005 void prototype  
|  |  IDENT "puts" 6:8.000 void prototype 
|  |  STRINGCON ""Jun 12 2015"" 6:8.006 string const 
|  CALL "(" 6:9.005 void prototype  
|  |  IDENT "puts" 6:9.000 void prototype 
|  |  STRINGCON "" @ "" 6:9.006 string const 
|  CALL "(" 6:10.005 void prototype  
|  |  IDENT "puts" 6:10.000 void prototype 
|  |  STRINGCON ""16:01:04"" 6:10.006 string const 
|  CALL "(" 6:11.005 void prototype 
|  |  IDENT "endl" 6:11.000 void prototype 
|  BLOCK "{" 6:12.000       
|  |  IFELSE "if" 6:12.001        
|  |  |  '!' "!" 6:12.005 bool vreg 
|  |  |  |  EQ "==" 6:12.016 bool vreg  
|  |  |  |  |  STRINGCON ""assert"" 6:12.007 string const 
|  |  |  |  |  STRINGCON ""fail"" 6:12.019 string const 
|  |  |  CALL "(" 6:12.042 void prototype    
|  |  |  |  IDENT "__assert_fail" 6:12.028 void prototype 
|  |  |  |  STRINGCON ""\"assert\" == \"fail\""" 6:12.043 string const 
|  |  |  |  STRINGCON ""13-assertfail.oc"" 6:12.069 string const 
|  |  |  |  INTCON "12" 6:12.089 int const 
|  ';' ";" 6:12.094       


char* c1 = " was compiled ";
char* c2 = "Jun 12 2015";
char* c3 = " @ ";
char* c4 = "16:01:04";
char* c5 = "assert";
char* c6 = "fail";
char* c7 = "\"assert\" == \"fail\"";
char* c8 = "13-assertfail.oc";
void __ocmain (void) {
        char**  a9 = __getargv();
        char*  *a11 = &a9[0];
        __puts(*a11);
        __puts(c1);
        __puts(c2);
        __puts(c3);
        __puts(c4);
        __endl();
        char  c19 = c5 == c6;
        char  c21 = c5 == c6;
        char  c23 = !c21;
        if(!c23) goto fi_6_12_1;
        ____assert_fail(c7, c8, 12);
fi_6_12_1:;
return;
};
